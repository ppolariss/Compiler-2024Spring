fn foo () {}

struct AStruct {
    a: int
}

struct MyStruct {
    a: int,
    b[3]: int,
    c: AStruct,
    d[3]: AStruct
}

let a: int;
let a1: int = -1 + 2;
let b[3]: int;
let b2[3]: int = {1, 2, -3};
let c: MyStruct;
let d[3]: MyStruct;

fn main() -> int {
    // assign
    a = 1;
    b[1] = 2;
    c.a = 1 + 2;
    c.b[1] = 2 + 2 + 2 - 2;
    d[1].c.a = 5;
    d[1].d[1].a = 6;

    // decl
    let e: int = 1;
    let e1: int = e + 1;
    let f[3]: int = {1, 2, 3};
    let g: MyStruct;
    let h[3]: MyStruct;
    foo();

    // fn call
    bar (e1, f, g, h);
    putint(g.a);
}

fn bar (a: int, b[3]: int, c: MyStruct, d[3]: MyStruct) {
    putint(a);
    b[1] = 4;
    if (1 > 2 && no_run() > -1) {
        ret;
    }
    
    // index
    let i: int = 0;
    while (i < 6 && b[1] > 1) {
        let t: int = i + 1;
        d[i].b[t] = i + t * 1;
        if (i == 1) {
            break;
        } else {
            i = i + 1;
            continue;
        }
        d[i].b[t] = -1;
    }
    c.a = d[0].b[1] + d[1].b[2];
}

fn no_run () -> int {
    putint(10);
    ret 0;
}